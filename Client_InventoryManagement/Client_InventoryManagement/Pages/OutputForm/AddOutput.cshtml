@page
@model Client_InventoryManagement.Pages.OutputForm.AddOutputModel
@{
}
<head>

    <link rel="stylesheet" href="~/assets/css/bootstrap.min.css">

    <link rel="stylesheet" href="~/assets/css/bootstrap-datetimepicker.min.css">

    <link rel="stylesheet" href="~/assets/css/animate.css">

    <link rel="stylesheet" href="~/assets/plugins/select2/css/select2.min.css">

    <link rel="stylesheet" href="~/assets/css/dataTables.bootstrap4.min.css">

    <link rel="stylesheet" href="~/assets/plugins/fontawesome/css/fontawesome.min.css">
    <link rel="stylesheet" href="~/assets/plugins/fontawesome/css/all.min.css">

    <link rel="stylesheet" href="~/assets/css/style.css">
</head>

<div class="content">
    <div class="page-header">
        <div class="page-title">
            <h4>Add Output</h4>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(TempData["Message"] as string))
    {
        <div class="alert @((TempData["Message"] as string)?.Contains("successfully") == true ? "alert-success" : "alert-danger")">
            @TempData["Message"]
        </div>
    }
    <form id="inputForm" method="post">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Customer Name</label>
                            <select name="OutputDTOForm.CustomerId" id="customerSelect" class="select">
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Supplier Name</label>
                            <select id="supplierSelect" class="select">
                            </select>
                        </div>
                    </div>

                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Product Name</label>
                            <select id="productSelect" class="select">
                            </select>
                        </div>
                    </div>

                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>From Invoice</label>
                            <select id="inputSelect" class="select">
                            </select>
                        </div>
                    </div>

                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Status</label>
                            <select name="OutputDTOForm.Status" id="statusSelect" class="select">
                                <option>Choose Status</option>
                                <option>Completed</option>
                                <option>Inprogress</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Product Name</th>
                                    <th>Quantity</th>
                                    <th>Expired Date</th>
                                    <th>Output Price($) </th>
                                    <th class="text-end">Total Cost ($) </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="productTableBody">
                                <input type="hidden" id="productData" name="ProductData" />

                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 float-md-right">
                        <div class="total-order">
                            <ul>
                                <li>
                                    <h4>Total Products</h4>
                                    <h5 id="totalProducts">0</h5>
                                </li>
                                <li>
                                    <h4>Total Products Quantity</h4>
                                    <h5 id="totalProductsQuantity">0</h5>
                                </li>
                                <li class="total">
                                    <h4>Grand Total</h4>
                                    <h5 id="grandTotalAmount">$ 0.00</h5>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <label>Note</label>
                            <textarea name="OutputDTOForm.Note" class="form-control"></textarea>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-submit me-2">Submit</button>
                        <a href="/InputForm/InputList" class="btn btn-cancel">Cancel</a>
                    </div>
                </div>
            </div>
        </div>
    </form>

</div>
<script src="~/assets/js/jquery-3.6.0.min.js"></script>

<script src="~/assets/js/feather.min.js"></script>

<script src="~/assets/js/jquery.slimscroll.min.js"></script>

<script src="~/assets/js/jquery.dataTables.min.js"></script>
<script src="~/assets/js/dataTables.bootstrap4.min.js"></script>

<script src="~/assets/js/bootstrap.bundle.min.js"></script>

<script src="~/assets/plugins/select2/js/select2.min.js"></script>

<script src="~/assets/js/moment.min.js"></script>
<script src="~/assets/js/bootstrap-datetimepicker.min.js"></script>

<script src="~/assets/plugins/sweetalert/sweetalert2.all.min.js"></script>
<script src="~/assets/plugins/sweetalert/sweetalerts.min.js"></script>

<script src="~/assets/js/script.js"></script>

<script>
    $(document).ready(function () {
        var jwtToken = getCookieValue('jwtToken');
        $.ajax({
            url: 'https://localhost:5000/api/Customer',
            type: 'GET',
            dataType: 'json',
            beforeSend: function (xhr) {
                if (jwtToken) {
                    xhr.setRequestHeader('Authorization', 'Bearer ' + jwtToken);
                }
            },
            success: function (data) {
                // Clear existing options
                $('#customerSelect').empty();
                // Add the "Choose" option
                $('#customerSelect').append($('<option>', {
                    value: '',
                    text: 'Choose'
                }));

                // Iterate through the customer data and add options
                $.each(data, function (index, customer) {
                    $('#customerSelect').append($('<option>', {
                        value: customer.id,
                        text: customer.customerName
                    }));
                });
            },
            error: function () {
                console.log('Error fetching customers');
            }
        });
        function getCookieValue(cookieName) {
            var name = cookieName + '=';
            var decodedCookie = decodeURIComponent(document.cookie);
            var cookieArray = decodedCookie.split(';');
            for (var i = 0; i < cookieArray.length; i++) {
                var cookie = cookieArray[i].trim();
                if (cookie.indexOf(name) === 0) {
                    return cookie.substring(name.length, cookie.length);
                }
            }
            return null;
        }
        // Make the AJAX request to your API endpoint
        $.ajax({
            url: 'https://localhost:5000/api/Supplier',
            type: 'GET',
            dataType: 'json',
            beforeSend: function (xhr) {
                if (jwtToken) {
                    xhr.setRequestHeader('Authorization', 'Bearer ' + jwtToken);
                }
            },
            success: function (data) {
                // Clear existing options
                $('#supplierSelect').empty();
                // Add the "Choose" option
                $('#supplierSelect').append($('<option>', {
                    value: '',
                    text: 'Choose'
                }));

                // Iterate through the supplier data and add options
                $.each(data, function (index, supplier) {
                    $('#supplierSelect').append($('<option>', {
                        value: supplier.id,
                        text: supplier.supplierName
                    }));
                });
            },
            error: function () {
                console.log('Error fetching suppliers');
            }
        });


        // Handle supplier selection
        $('#supplierSelect').change(function () {
            var selectedSupplierId = $(this).val();

            if (selectedSupplierId !== '') {
                // Make the AJAX request to get products by supplier ID
                $.ajax({
                    url: `https://localhost:5000/api/Product/Supplier/${selectedSupplierId}`,
                    type: 'GET',
                    dataType: 'json',
                    beforeSend: function (xhr) {
                        if (jwtToken) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + jwtToken);
                        }
                    },
                    success: function (data) {
                        $('#productSelect').empty();
                        $('#productSelect').append($('<option>', {
                            value: '',
                            text: 'Choose'
                        }));
                        $.each(data, function (index, product) {
                            $('#productSelect').append($('<option>', {
                                value: product.id,
                                text: product.productName
                            }));
                        });
                    },
                    error: function () {
                        console.log('Error fetching products for the selected supplier');
                    }
                });
            } else {
                $('#productSelect').empty(); // Clear products if no supplier is selected
            }
        });

        // Handle product selection
        $('#productSelect').change(function () {
            var selectedProductId = $(this).val();

            if (selectedProductId !== '') {
                // Make the AJAX request to get products by supplier ID
                $.ajax({
                    url: `https://localhost:5000/api/Input/GetInputByProductId/${selectedProductId}`,
                    type: 'GET',
                    dataType: 'json',
                    beforeSend: function (xhr) {
                        if (jwtToken) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + jwtToken);
                        }
                    },
                    success: function (data) {
                        $('#inputSelect').empty();
                        $('#inputSelect').append($('<option>', {
                            value: '',
                            text: 'Choose'
                        }));
                        $.each(data, function (index, input) {
                            // Parse the inputDate using Date object
                            var formattedDate = new Date(input.inputDate).toLocaleDateString('en-GB', {
                                day: '2-digit',
                                month: '2-digit',
                                year: 'numeric'
                            });

                            $('#inputSelect').append($('<option>', {
                                value: input.id,
                                text: 'Date Input: ' + formattedDate + ' - Quantity In Stock: ' + input.quantityInStock
                            }));
                        });
                    },
                    error: function () {
                        console.log('Error fetching input');
                    }
                });
            } else {
                $('#inputSelect').empty(); // Clear products if no supplier is selected
            }
        });
        function updateCustomerSelectAvailability() {
            // Check if there are any rows in the product table
            var hasProductData = $('#productTableBody tr').length > 0;

            // Enable or disable the customerSelect dropdown based on the product data
            $('#customerSelect').prop('disabled', hasProductData);
        }

        // Handle input selection
        $('#inputSelect').change(function () {
            var selectedInputId = $(this).val();
            var productId = $('#productSelect').val();

            if (selectedInputId !== '') {
                // Make the AJAX request to get product details
                $.ajax({
                    url: `https://localhost:5000/api/Input/GetInputByProductIdAndInpuId/${selectedInputId}/${productId}`,
                    type: 'GET',
                    dataType: 'json',
                    beforeSend: function (xhr) {
                        if (jwtToken) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + jwtToken);
                        }
                    },
                    success: function (product) {
                        // Add a new row to the table with the selected product details
                        var formattedDate = new Date(product.expiredDate).toISOString().split('T')[0];
                        var newRow = `
                                                                                <tr data-product-id="${product.productId}">
                                                                                <td class="productimgname">
                                                                                    <a class="product-img">
                                                                                        <img src="/assets/img/product/product7.jpg" alt="product">
                                                                                    </a>
                                                                                        <a href="javascript:void(0);">${product.productName}</a>
                                                                                </td>
                                                                                        <input type="hidden" id="inputId" name="InputId" value="${product.id}" />
                                                                                <td>
                                                                                    <input class="form-control quantity-input" type="number" value="1" min="1" max="${product.quantityInStock}">
                                                                                </td>
                                                                                <td>
            <input class="form-control expired-input" type="date" value="${formattedDate}" readonly>
                                                                                    </td>
                                                                                <td>
                                                                                    <input class="form-control price-input" type="number" step="0.01" value="${product.inputPrice * 0.15}">
                                                                                </td>
                                                                                <td class="text-end">0.00</td>
                                                                                <td>
                                                                                    <a class="delete-set">
                                                                                        <img src="/assets/img/icons/delete.svg" alt="svg">
                                                                                    </a>
                                                                                </td>
                                                                            </tr>
                                                                        `;
                        var $newRow = $(newRow);
                        $('#productTableBody').append($newRow);
                        updateTotalCounts();

                        // Calculate total cost for the newly added row and update the "text-end" cell
                        var quantity = parseInt($newRow.find('.quantity-input').val());
                        var price = parseFloat($newRow.find('.price-input').val());
                        var totalCost = quantity * price;
                        $newRow.find('.text-end').text(totalCost.toFixed(2));

                        updateCustomerSelectAvailability();
                    },
                    error: function () {
                        console.log('Error fetching product details');
                    }
                });
            }
        });

        // Calculate total cost and update the table
        $('#productTableBody').on('input', '.quantity-input, .price-input', function () {
            var row = $(this).closest('tr');
            var quantity = parseInt(row.find('.quantity-input').val());
            var price = parseFloat(row.find('.price-input').val());

            // Ensure positive quantity and price values
            if (quantity < 0 || isNaN(quantity)) {
                row.find('.quantity-input').val(0);
                quantity = 0;
            }

            if (price < 0 || isNaN(price)) {
                row.find('.price-input').val(0);
                price = 0;
            }

            var totalCost = quantity * price;

            row.find('.text-end').text(totalCost.toFixed(2));

            // Calculate and update the total products, total products quantity, and grand total
            updateTotalCounts();
        });

        $('#productTableBody').on('click', '.delete-set', function () {
            $(this).closest('tr').remove();
            updateTotalCounts();

            updateCustomerSelectAvailability();
        });

        function updateTotalCounts() {
            var productCounts = {}; // Object to store product name counts
            var totalProductsQuantity = 0; // Total quantity of all products
            var grandTotal = 0;

            $('#productTableBody tr').each(function () {
                var productName = $(this).find('.productimgname a:last-child').text().trim(); // Updated code
                var quantity = parseInt($(this).find('.quantity-input').val());
                var price = parseFloat($(this).find('.price-input').val());

                var totalCost = quantity * price;

                // Update product name count
                if (productCounts[productName]) {
                    productCounts[productName] += quantity;
                } else {
                    productCounts[productName] = quantity;
                }

                totalProductsQuantity += quantity; // Update total quantity
                grandTotal += totalCost;
            });

            // Update the total products count, total products quantity, and grand total
            var uniqueProductCount = Object.keys(productCounts).length;
            $('#totalProducts').text(uniqueProductCount);
            $('#totalProductsQuantity').text(totalProductsQuantity);
            $('#grandTotalAmount').text('$ ' + grandTotal.toFixed(2));
        }

        function resetForm() {
            $('#supplierSelect').val('');
            $('#productSelect').empty();
            $('#productTableBody').empty();
            $('#totalProducts').text(0);
            $('#totalProductsQuantity').text(0);
            $('#grandTotalAmount').text('$ 0.00');
        }

        function getListOfProducts() {
            var products = [];

            $('#productTableBody tr').each(function () {
                var productId = $(this).data('product-id');
                var quantity = parseInt($(this).find('.quantity-input').val());
                var price = parseFloat($(this).find('.price-input').val());
                var inputId = $(this).find('#inputId').val();

                var product = {
                    ProductId: productId,
                    Quantity: quantity,
                    InputId: inputId,
                    OutputPrice: price
                };

                products.push(product);
            });
            $('#productData').val(JSON.stringify(products));

            // consolde value of productData
            console.log($('#productData').val());
            return products;
        }

        // Handle form submission
        $('#inputForm').submit(function (event) {
            event.preventDefault();
            getListOfProducts();

            // enable the customer select
            $('#customerSelect').prop('disabled', false);

            // Now you can submit the form using regular form submission
            $('#inputForm').off('submit').submit();
        });
    });
</script>